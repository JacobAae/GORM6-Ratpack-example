buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "io.ratpack:ratpack-gradle:1.4.5"
    classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    classpath 'com.bmuschko:gradle-docker-plugin:3.0.5'
  }
}

apply plugin: "io.ratpack.ratpack-groovy"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "idea"
apply plugin: "eclipse"

repositories {
  jcenter()
}

dependencies {
  // Default SLF4J binding.  Note that this is a blocking implementation.
  // See here for a non blocking appender http://logging.apache.org/log4j/2.x/manual/async.html
  runtime 'org.slf4j:slf4j-simple:1.7.21'

  testCompile "org.spockframework:spock-core:1.0-groovy-2.4"

  compile "org.grails:grails-datastore-gorm-hibernate5:6.0.4.RELEASE"
  compile 'org.postgresql:postgresql:9.4-1203-jdbc4'

  compile ratpack.dependency('hikari')
}

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer

task buildImage(type: DockerBuildImage) {
    inputDir = file('Docker')
    tag = 'postgresexample'
}

task createContainer(type: DockerCreateContainer) {
    dependsOn buildImage
    targetImageId { 'postgresexample' }
    containerName = 'postgresexample'
    portBindings = ['5432:5432']
}

task startContainer(type: DockerStartContainer) {
    description "Starts a postgres container with a database and user for the application"
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
}

task removeContainer(type: DockerRemoveContainer) {
    description "Destroys the postgres container"
    removeVolumes = true
    force = true
    targetContainerId { 'postgresexample' }
}

